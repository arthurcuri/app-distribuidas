#!/usr/bin/env node

const readline = require('readline');
const { spawn } = require('child_process');
const path = require('path');

/**
 * Interface CLI para Demonstra√ß√£o dos Entreg√°veis gRPC
 * 
 * DISCLAIMER: Esta interface CLI N√ÉO faz parte dos entreg√°veis obrigat√≥rios.
 * Foi desenvolvida apenas para facilitar a visualiza√ß√£o e demonstra√ß√£o das
 * funcionalidades implementadas nos itens do roteiro.
 * 
 * Funcionalidades implementadas nos entreg√°veis:
 * 1. ‚úÖ Autentica√ß√£o JWT com interceptadores
 * 2. ‚úÖ Tratamento robusto de erros gRPC  
 * 3. ‚úÖ Load Balancing entre m√∫ltiplos servidores
 * 4. ‚úÖ Streaming Bidirecional com chat em tempo real
 */

class GrpcDemoInterface {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        this.currentProcess = null;
        this.setupSignalHandlers();
    }

    /**
     * Configurar handlers para sinais
     */
    setupSignalHandlers() {
        process.on('SIGINT', () => {
            this.cleanup();
            process.exit(0);
        });
        
        process.on('SIGTERM', () => {
            this.cleanup();
            process.exit(0);
        });
    }

    /**
     * Limpeza ao sair
     */
    cleanup() {
        if (this.currentProcess) {
            console.log('\nüõë Encerrando processo atual...');
            this.currentProcess.kill('SIGTERM');
        }
        this.rl.close();
    }

    /**
     * Exibir banner inicial
     */
    showBanner() {
        console.clear();
        console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë                    üöÄ DEMONSTRA√á√ÉO ENTREG√ÅVEIS gRPC üöÄ                     ‚ïë');
        console.log('‚ïë                                                                              ‚ïë');
        console.log('‚ïë  DISCLAIMER: Esta interface CLI N√ÉO faz parte dos entreg√°veis obrigat√≥rios ‚ïë');
        console.log('‚ïë  Foi criada apenas para facilitar a visualiza√ß√£o das funcionalidades       ‚ïë');
        console.log('‚ïë                                                                              ‚ïë');
        console.log('‚ïë  üìã Roteiro 02 - LAB Desenvolvimento de Aplica√ß√µes M√≥veis e Distribu√≠das   ‚ïë');
        console.log('‚ïë  üéì 5¬∞ Per√≠odo - 2025                                                       ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        console.log('');
    }

    /**
     * Exibir disclaimer
     */
    showDisclaimer() {
        console.log('‚ö†Ô∏è  IMPORTANTE - LEIA ANTES DE PROSSEGUIR:');
        console.log('');
        console.log('üìå Esta interface CLI √© apenas uma ferramenta de demonstra√ß√£o');
        console.log('üìå Os entreg√°veis reais s√£o os arquivos de c√≥digo implementados');
        console.log('üìå Cada funcionalidade foi implementada conforme especificado no roteiro');
        console.log('üìå Use esta interface para visualizar as funcionalidades em a√ß√£o');
        console.log('');
        console.log('‚úÖ Status dos Entreg√°veis:');
        console.log('   1. ‚úÖ Autentica√ß√£o JWT - IMPLEMENTADO COMPLETO');
        console.log('   2. ‚úÖ Error Handling - IMPLEMENTADO COMPLETO');
        console.log('   3. ‚úÖ Load Balancing - IMPLEMENTADO COMPLETO');
        console.log('   4. ‚úÖ Streaming Bidirecional - IMPLEMENTADO COMPLETO');
        console.log('');
    }

    /**
     * Exibir menu principal
     */
    showMainMenu() {
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ                           üìã MENU PRINCIPAL                                   ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  1Ô∏è‚É£   Autentica√ß√£o JWT                                                      ‚îÇ');
        console.log('‚îÇ      üîê Demonstrar interceptadores de autentica√ß√£o                         ‚îÇ');
        console.log('‚îÇ      üìÅ Arquivos: jwtInterceptor.js, middleware/grpcAuth.js               ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  2Ô∏è‚É£   Error Handling                                                        ‚îÇ');
        console.log('‚îÇ      ‚ùå Demonstrar tratamento robusto de erros gRPC                        ‚îÇ');
        console.log('‚îÇ      üìÅ Arquivos: utils/errorHandler.js, middleware/errorInterceptor.js   ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  3Ô∏è‚É£   Load Balancing                                                        ‚îÇ');
        console.log('‚îÇ      ‚öñÔ∏è  Demonstrar balanceamento entre m√∫ltiplos servidores               ‚îÇ');
        console.log('‚îÇ      üìÅ Arquivos: utils/loadBalancer.js, utils/loadBalancedClient.js      ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  4Ô∏è‚É£   Streaming Bidirecional                                               ‚îÇ');
        console.log('‚îÇ      üí¨ Demonstrar chat em tempo real                                      ‚îÇ');
        console.log('‚îÇ      üìÅ Arquivos: services/ChatService.js, protos/chat_service.proto      ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  5Ô∏è‚É£   Demo Completa                                                         ‚îÇ');
        console.log('‚îÇ      üé≠ Executar demonstra√ß√£o de todas as funcionalidades                 ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  6Ô∏è‚É£   Informa√ß√µes dos Entreg√°veis                                          ‚îÇ');
        console.log('‚îÇ      üìö Ver documenta√ß√£o e arquivos implementados                          ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îÇ  0Ô∏è‚É£   Sair                                                                  ‚îÇ');
        console.log('‚îÇ                                                                             ‚îÇ');
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        console.log('');
    }

    /**
     * Executar processo demo
     */
    async runDemo(scriptName, title, description) {
        console.clear();
        console.log(`üöÄ ${title}`);
        console.log(`üìù ${description}`);
        console.log('');
        console.log('‚è≥ Iniciando demonstra√ß√£o...');
        console.log('üí° Pressione Ctrl+C a qualquer momento para voltar ao menu');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('');

        return new Promise((resolve, reject) => {
            const scriptPath = path.join(__dirname, scriptName);
            
            this.currentProcess = spawn('node', [scriptPath], {
                stdio: 'inherit',
                cwd: __dirname
            });

            this.currentProcess.on('close', (code) => {
                this.currentProcess = null;
                console.log('');
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                console.log(`‚úÖ Demonstra√ß√£o conclu√≠da (c√≥digo: ${code})`);
                resolve(code);
            });

            this.currentProcess.on('error', (error) => {
                this.currentProcess = null;
                console.error(`‚ùå Erro ao executar demonstra√ß√£o: ${error.message}`);
                reject(error);
            });
        });
    }

    /**
     * Aguardar input do usu√°rio
     */
    async waitForInput(message) {
        return new Promise((resolve) => {
            this.rl.question(message, (answer) => {
                resolve(answer);
            });
        });
    }

    /**
     * Pausar e aguardar Enter
     */
    async pauseForEnter(message = '\nüì± Pressione Enter para voltar ao menu principal...') {
        await this.waitForInput(message);
    }

    /**
     * Demonstrar autentica√ß√£o JWT
     */
    async demonstrateJWT() {
        await this.runDemo(
            'demos/jwt-demo.js',
            'DEMONSTRA√á√ÉO: Autentica√ß√£o JWT com Interceptadores',
            'Mostra interceptadores JWT funcionando com autentica√ß√£o e autoriza√ß√£o'
        );
        await this.pauseForEnter();
    }

    /**
     * Demonstrar error handling
     */
    async demonstrateErrorHandling() {
        await this.runDemo(
            'demos/error-handling-demo.js',
            'DEMONSTRA√á√ÉO: Tratamento Robusto de Erros gRPC',
            'Mostra sistema de retry, circuit breaker e erro structures'
        );
        await this.pauseForEnter();
    }

    /**
     * Demonstrar load balancing
     */
    async demonstrateLoadBalancing() {
        await this.runDemo(
            'demos/load-balancing-demo.js',
            'DEMONSTRA√á√ÉO: Load Balancing entre M√∫ltiplos Servidores',
            'Mostra distribui√ß√£o de carga com diferentes estrat√©gias'
        );
        await this.pauseForEnter();
    }

    /**
     * Demonstrar streaming bidirecional
     */
    async demonstrateStreaming() {
        await this.runDemo(
            'demos/streaming-demo.js',
            'DEMONSTRA√á√ÉO: Streaming Bidirecional - Chat em Tempo Real',
            'Mostra chat em tempo real usando gRPC streaming'
        );
        await this.pauseForEnter();
    }

    /**
     * Demonstra√ß√£o completa
     */
    async demonstrateComplete() {
        console.clear();
        console.log('üé≠ DEMONSTRA√á√ÉO COMPLETA DE TODAS AS FUNCIONALIDADES');
        console.log('');
        console.log('üìã Esta demonstra√ß√£o executar√° sequencialmente:');
        console.log('   1. Autentica√ß√£o JWT');
        console.log('   2. Error Handling');
        console.log('   3. Load Balancing');
        console.log('   4. Streaming Bidirecional');
        console.log('');
        
        const confirm = await this.waitForInput('Deseja continuar? (s/n): ');
        if (confirm.toLowerCase() !== 's' && confirm.toLowerCase() !== 'sim') {
            return;
        }

        console.log('\nüöÄ Iniciando demonstra√ß√£o completa...\n');

        try {
            await this.demonstrateJWT();
            await this.demonstrateErrorHandling();
            await this.demonstrateLoadBalancing();
            await this.demonstrateStreaming();
            
            console.log('\nüéâ Demonstra√ß√£o completa finalizada com sucesso!');
        } catch (error) {
            console.error('\n‚ùå Erro durante demonstra√ß√£o completa:', error.message);
        }
        
        await this.pauseForEnter();
    }

    /**
     * Mostrar informa√ß√µes dos entreg√°veis
     */
    async showDeliverablesInfo() {
        console.clear();
        console.log('üìö INFORMA√á√ïES DOS ENTREG√ÅVEIS');
        console.log('');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('1Ô∏è‚É£  AUTENTICA√á√ÉO JWT');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìÅ Arquivos implementados:');
        console.log('   ‚îú‚îÄ‚îÄ jwtInterceptor.js              # Interceptador principal JWT');
        console.log('   ‚îú‚îÄ‚îÄ middleware/grpcAuth.js         # Middleware de autentica√ß√£o');
        console.log('   ‚îú‚îÄ‚îÄ services/AuthService.js        # Servi√ßo de autentica√ß√£o');
        console.log('   ‚îî‚îÄ‚îÄ protos/auth_service.proto       # Defini√ß√µes de protocolo');
        console.log('');
        console.log('üîß Funcionalidades:');
        console.log('   ‚úÖ Interceptador un√°rio e streaming');
        console.log('   ‚úÖ Valida√ß√£o de tokens JWT');
        console.log('   ‚úÖ Refresh de tokens autom√°tico');
        console.log('   ‚úÖ Metadados de autentica√ß√£o');
        console.log('');
        
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('2Ô∏è‚É£  ERROR HANDLING');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìÅ Arquivos implementados:');
        console.log('   ‚îú‚îÄ‚îÄ utils/errorHandler.js          # Classes de erro estruturadas');
        console.log('   ‚îú‚îÄ‚îÄ middleware/errorInterceptor.js # Interceptador de erros');
        console.log('   ‚îú‚îÄ‚îÄ utils/resilientClient.js       # Cliente com retry/circuit breaker');
        console.log('   ‚îî‚îÄ‚îÄ ERROR_HANDLING_README.md       # Documenta√ß√£o completa');
        console.log('');
        console.log('üîß Funcionalidades:');
        console.log('   ‚úÖ Retry com backoff exponencial');
        console.log('   ‚úÖ Circuit breaker pattern');
        console.log('   ‚úÖ Erros estruturados com metadados');
        console.log('   ‚úÖ Logging e m√©tricas de erro');
        console.log('');

        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('3Ô∏è‚É£  LOAD BALANCING');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìÅ Arquivos implementados:');
        console.log('   ‚îú‚îÄ‚îÄ utils/loadBalancer.js          # Core do load balancer');
        console.log('   ‚îú‚îÄ‚îÄ utils/loadBalancedClient.js    # Cliente com balanceamento');
        console.log('   ‚îú‚îÄ‚îÄ utils/loadBalancerGateway.js   # Gateway/proxy');
        console.log('   ‚îú‚îÄ‚îÄ utils/backendCluster.js        # Gerenciador de cluster');
        console.log('   ‚îî‚îÄ‚îÄ LOAD_BALANCING_README.md       # Documenta√ß√£o completa');
        console.log('');
        console.log('üîß Funcionalidades:');
        console.log('   ‚úÖ 5 estrat√©gias de balanceamento');
        console.log('   ‚úÖ Health monitoring autom√°tico');
        console.log('   ‚úÖ Sticky sessions');
        console.log('   ‚úÖ Pool de conex√µes otimizado');
        console.log('');

        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('4Ô∏è‚É£  STREAMING BIDIRECIONAL');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìÅ Arquivos implementados:');
        console.log('   ‚îú‚îÄ‚îÄ services/ChatService.js        # Servi√ßo de chat streaming');
        console.log('   ‚îú‚îÄ‚îÄ protos/chat_service.proto       # Defini√ß√µes de streaming');
        console.log('   ‚îú‚îÄ‚îÄ tests/chat.test.js             # Testes do chat');
        console.log('   ‚îî‚îÄ‚îÄ STREAMING_README.md            # Documenta√ß√£o completa');
        console.log('');
        console.log('üîß Funcionalidades:');
        console.log('   ‚úÖ Chat em tempo real');
        console.log('   ‚úÖ Salas de chat m√∫ltiplas');
        console.log('   ‚úÖ Gerenciamento de usu√°rios online');
        console.log('   ‚úÖ Hist√≥rico de mensagens');
        console.log('');

        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìä RESUMO GERAL');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('‚úÖ Todos os 4 itens do roteiro foram implementados completamente');
        console.log('‚úÖ C√≥digo funcional e testado');
        console.log('‚úÖ Documenta√ß√£o completa para cada item');
        console.log('‚úÖ Exemplos de uso e demonstra√ß√µes');
        console.log('‚úÖ Arquitetura production-ready');
        console.log('');

        await this.pauseForEnter();
    }

    /**
     * Processar escolha do menu
     */
    async processMenuChoice(choice) {
        switch (choice) {
            case '1':
                await this.demonstrateJWT();
                break;
            case '2':
                await this.demonstrateErrorHandling();
                break;
            case '3':
                await this.demonstrateLoadBalancing();
                break;
            case '4':
                await this.demonstrateStreaming();
                break;
            case '5':
                await this.demonstrateComplete();
                break;
            case '6':
                await this.showDeliverablesInfo();
                break;
            case '0':
                console.log('\nüëã Obrigado por usar a interface de demonstra√ß√£o!');
                console.log('üìã Lembre-se: os entreg√°veis est√£o nos arquivos de c√≥digo implementados');
                this.cleanup();
                process.exit(0);
                break;
            default:
                console.log('\n‚ùå Op√ß√£o inv√°lida! Escolha uma op√ß√£o de 0 a 6.');
                await this.pauseForEnter();
                break;
        }
    }

    /**
     * Loop principal da interface
     */
    async run() {
        this.showBanner();
        this.showDisclaimer();
        
        const confirm = await this.waitForInput('Pressione Enter para continuar para o menu principal...');
        
        while (true) {
            console.clear();
            this.showBanner();
            this.showMainMenu();
            
            const choice = await this.waitForInput('üî¢ Escolha uma op√ß√£o (0-6): ');
            await this.processMenuChoice(choice.trim());
        }
    }
}

// Executar interface se chamado diretamente
if (require.main === module) {
    const interface = new GrpcDemoInterface();
    
    interface.run().catch((error) => {
        console.error('üí• Erro fatal na interface:', error);
        process.exit(1);
    });
}

module.exports = {
    GrpcDemoInterface
};
