const express = require('express');
const User = require('../models/User');
const database = require('../database/database');
const { authMiddleware } = require('../middleware/auth');

const router = express.Router();

// üîí Middleware de autentica√ß√£o para todas as rotas
router.use(authMiddleware);

// üìã ROTA 1: Listar todos os usu√°rios
router.get('/', async (req, res) => {
    try {
        // üîç Query simples - users n√£o t√™m completed/priority
        const rows = await database.all(
            'SELECT id, email, username, firstName, lastName, createdAt FROM users ORDER BY createdAt DESC'
        );

        res.json({
            success: true,
            message: 'Usu√°rios listados com sucesso',
            data: rows
        });
    } catch (error) {
        console.error('Erro ao listar usu√°rios:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erro interno do servidor' 
        });
    }
});

// üë§ ROTA 2: Buscar usu√°rio espec√≠fico por ID
router.get('/:id', async (req, res) => {
    try {
        const row = await database.get(
            'SELECT id, email, username, firstName, lastName, createdAt FROM users WHERE id = ?',
            [req.params.id]
        );

        if (!row) {
            return res.status(404).json({
                success: false,
                message: 'Usu√°rio n√£o encontrado'
            });
        }

        res.json({
            success: true,
            data: row
        });
    } catch (error) {
        console.error('Erro ao buscar usu√°rio:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erro interno do servidor' 
        });
    }
});

// ‚úèÔ∏è ROTA 3: Atualizar perfil do usu√°rio
router.put('/:id', async (req, res) => {
    try {
        // üîê Verificar se o usu√°rio est√° atualizando seu pr√≥prio perfil
        if (req.params.id !== req.user.id) {
            return res.status(403).json({
                success: false,
                message: 'Voc√™ s√≥ pode atualizar seu pr√≥prio perfil'
            });
        }

        // üìù Campos v√°lidos para usu√°rio (n√£o completed/priority!)
        const { firstName, lastName, email } = req.body;
        
        // ‚úÖ Valida√ß√£o b√°sica
        if (!firstName || !lastName || !email) {
            return res.status(400).json({
                success: false,
                message: 'firstName, lastName e email s√£o obrigat√≥rios'
            });
        }

        const result = await database.run(
            'UPDATE users SET firstName = ?, lastName = ?, email = ? WHERE id = ?',
            [firstName, lastName, email, req.params.id]
        );

        if (result.changes === 0) {
            return res.status(404).json({
                success: false,
                message: 'Usu√°rio n√£o encontrado'
            });
        }

        // üîÑ Buscar dados atualizados
        const updatedRow = await database.get(
            'SELECT id, email, username, firstName, lastName, createdAt FROM users WHERE id = ?',
            [req.params.id]
        );

        res.json({
            success: true,
            message: 'Perfil atualizado com sucesso',
            data: updatedRow
        });
    } catch (error) {
        console.error('Erro ao atualizar usu√°rio:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erro interno do servidor' 
        });
    }
});

// üóëÔ∏è ROTA 4: Deletar usu√°rio
router.delete('/:id', async (req, res) => {
    try {
        // üîê Verificar se o usu√°rio est√° deletando seu pr√≥prio perfil
        if (req.params.id !== req.user.id) {
            return res.status(403).json({
                success: false,
                message: 'Voc√™ s√≥ pode deletar seu pr√≥prio perfil'
            });
        }

        const result = await database.run(
            'DELETE FROM users WHERE id = ?',
            [req.params.id]
        );

        if (result.changes === 0) {
            return res.status(404).json({
                success: false,
                message: 'Usu√°rio n√£o encontrado'
            });
        }

        res.json({
            success: true,
            message: 'Usu√°rio deletado com sucesso'
        });
    } catch (error) {
        console.error('Erro ao deletar usu√°rio:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Erro interno do servidor' 
        });
    }
});

module.exports = router;